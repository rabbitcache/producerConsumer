package com.abc.ppmimage;

import com.abc.pp.fifo.deluxe_bounded.*;
import com.abc.pp.fifo.deluxe_bounded.PPDeluxeBoundedFifo.*;
import com.abc.thread.*;

// Consumer of FlipHorizontally's output fifo and producer of
// final result fifo ready to be processed
public class Grayscale {
    private final PPDeluxeBoundedFifo<PpmImage> inputFifo;
    private final PPDeluxeBoundedFifo<PpmImage> outputFifo;

    private volatile boolean keepGoing;
    private Thread internalThread;

    public Grayscale(PPDeluxeBoundedFifo<PpmImage> inputFifo, PPDeluxeBoundedFifo<PpmImage> outputFifo) {
        this.inputFifo = inputFifo;
        this.outputFifo = outputFifo;
        keepGoing = true;
        internalThread = new Thread(this::runWork, "gray");
        internalThread.start();
    }

    /** to do
     * fix this code to work for a thread using the fifo
     */

    private void runWork() {
        ThreadTools.outln("%s starting", getClass().getSimpleName());
        try {
            while (keepGoing) {
                RemoveSingleResult<PpmImage> removeResult = inputFifo.remove();
                switch (removeResult.getStatus()) {
                    case EMPTY_AND_NO_MORE_ADDS_ALLOWED: return;
                    case SUCCESS:
                        PpmImage flippedImage = removeResult.getItem();
                        PpmImage.Row[] newRows = new PpmImage.Row[flippedImage.getRowCount()];
                        for (int rowIndex = 0; rowIndex < newRows.length; rowIndex++) {
                            PpmImage.Pixel[] newPixelsForRow = new PpmImage.Pixel[flippedImage.getColumnCount()];
                            for (int colIndex = 0; colIndex < newPixelsForRow.length; colIndex++) {
                                newPixelsForRow[colIndex] = flippedImage.getPixelAt(rowIndex, colIndex).asGrayscale();
                            }
                            newRows[rowIndex] = new PpmImage.Row(newPixelsForRow);
                            }
                        outputFifo.add(new PpmImage(newRows));
                }
            }

            } catch (InterruptedException x) {
                // ignore and let the thread die
        } finally {
            ThreadTools.outln("%s finished", getClass().getSimpleName());
        }
    }



}
