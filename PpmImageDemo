package com.abc.ppmimage;

import com.abc.pipeline.*;
import com.abc.pp.fifo.deluxe_bounded.*;
import com.abc.pp.fifo.deluxe_bounded.impl.*;
import com.abc.thread.*;

public class PpmImageDemo {

    public static void main(String[] args) {
        NanoTimer timer = NanoTimer.createStarted();
        NanoTimer ioTimer = NanoTimer.createStopped();
        NanoTimer imageProcessingTimer = NanoTimer.createStopped();


        try {
            PPDeluxeBoundedFifo<PpmImage.Row> imageStart = new CircularArrayPPDeluxeBoundedFifo<>(10, PpmImage.Row.class);
            PPDeluxeBoundedFifo<PpmImage.Row> imageFlipped = new CircularArrayPPDeluxeBoundedFifo<>(10, PpmImage.Row.class);
            PPDeluxeBoundedFifo<PpmImage.Row> imageGrayFlipped = new CircularArrayPPDeluxeBoundedFifo<>(10, PpmImage.Row.class);

            Read readPenguin = new Read(imageStart, "penguin");
            Read readFlowers = new Read(imageStart, "flowers");

            FlipHorizontally flipPenguin = new FlipHorizontally(imageStart, imageFlipped);
            FlipHorizontally flipFlower = new FlipHorizontally(imageStart, imageFlipped);
            Grayscale flipGrayPenguin = new Grayscale(imageFlipped, imageGrayFlipped, "penguin");
            Grayscale flipGrayFlower = new Grayscale(imageFlipped, imageGrayFlipped, "flowers");

            Write writePenguin = new Write(imageGrayFlipped, "penguin");
            Write writeFlower = new Write(imageGrayFlipped, "flowers");

        } finally {
            ThreadTools.outln("leaving main");
        }
    }
}
