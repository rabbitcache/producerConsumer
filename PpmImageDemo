package com.abc.ppmimage;

import java.io.*;

import com.abc.pp.fifo.deluxe_bounded.*;
import com.abc.pp.fifo.deluxe_bounded.impl.*;
import com.abc.thread.*;

public class PpmImageDemo {

    public static void main(String[] args) {
        NanoTimer timer = NanoTimer.createStarted();
        NanoTimer ioTimer = NanoTimer.createStopped();
        NanoTimer imageProcessingTimer = NanoTimer.createStopped();


        try {
            PPDeluxeBoundedFifo<PpmImage> imageFlipped = new CircularArrayPPDeluxeBoundedFifo<>(10, PpmImage.class);
            PPDeluxeBoundedFifo<PpmImage> imageGrayFlipped = new CircularArrayPPDeluxeBoundedFifo<>(10, PpmImage.class);

            ioTimer.start();
            PpmImage penguinOriginal = PpmImage.createFromFilename("src/images/penguin.ppm");
            PpmImage flowerOriginal = PpmImage.createFromFilename("src/images/flowers.ppm");
            ioTimer.stop();

            imageProcessingTimer.start();
            FlipHorizontally flipPenguin = new FlipHorizontally(penguinOriginal, imageFlipped);
            FlipHorizontally flipFlower = new FlipHorizontally(penguinOriginal, imageFlipped);
            Grayscale flipGrayPenguin = new Grayscale(imageFlipped, imageGrayFlipped);
            Grayscale flipGrayFlower = new Grayscale(imageFlipped, imageGrayFlipped);
            imageProcessingTimer.stop();

            ioTimer.start();
            Write writePenguin = new Write(imageGrayFlipped, "penguin");
            Write writeFlower = new Write(imageGrayFlipped, "flowers");

        } catch (FileNotFoundException x) {
            x.printStackTrace();
        } catch (IOException x) {
            x.printStackTrace();
        } finally {
            timer.stop();
            ThreadTools.outln("finished processing images, overall took %.5fs, %.5fs I/O, %.5fs image manipulation",
                timer.getElapsedSeconds(), ioTimer.getElapsedSeconds(), imageProcessingTimer.getElapsedSeconds());
        }
    }
}
